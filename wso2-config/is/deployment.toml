[server]
hostname = "localhost"
node_ip = "127.0.0.1"
base_path = "https://$ref{server.hostname}:${carbon.management.port}"
offset = 1

[super_admin]
username = "admin"
password = "admin"
create_admin_account = true

[user_store]
type = "read_write_ldap_unique_id"
connection_url = "ldap://localhost:${Ports.EmbeddedLDAP.LDAPServerPort}"
connection_name = "uid=admin,ou=system"
connection_password = "admin"
base_dn = "dc=wso2,dc=org"      #refers the base dn on which the user and group search bases will be generated

#[database.identity_db]
#type = "h2"
#url = "jdbc:h2:./repository/database/WSO2IDENTITY_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000"
#username = "wso2carbon"
#password = "wso2carbon"
#
#[database.shared_db]
#type = "h2"
#url = "jdbc:h2:./repository/database/WSO2SHARED_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000"
#username = "wso2carbon"
#password = "wso2carbon"

[database.identity_db]
type = "mysql"
url = "jdbc:mysql://localhost:3306/WSO2IDENTITY_DB?autoReconnect=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&driverClassName=com.mysql.cj.jdbc.Driver&allowPublicKeyRetrieval=true"
username = "WSO2CARBON"
password = "WSO2CARBON_PASSWORD123"

[database.shared_db]
type = "mysql"
url = "jdbc:mysql://localhost:3306/WSO2SHARED_DB?autoReconnect=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&driverClassName=com.mysql.cj.jdbc.Driver&allowPublicKeyRetrieval=true"
username = "WSO2CARBON"
password = "WSO2CARBON_PASSWORD123"

[keystore.primary]
file_name = "wso2carbon.jks"
password = "wso2carbon"

[truststore]
file_name="client-truststore.jks"
password="wso2carbon"
type="JKS"

[account_recovery.endpoint.auth]
hash= "66cd9688a2ae068244ea01e70f0e230f5623b7fa4cdecb65070a09ec06452262"

[identity.auth_framework.endpoint]
app_password= "dashboard"

# The KeyStore which is used for encrypting/decrypting internal data. By default the primary keystore is used as the internal keystore.

#[keystore.internal]
#file_name = "$ref{keystore.primary.file_name}"
#type = "$ref{keystore.primary.type}"
#password = "$ref{keystore.primary.password}"
#alias = "$ref{keystore.primary.alias}"
#key_password = "$ref{keystore.primary.key_password}"

# The KeyStore which is used for tls communication. By default the primary keystore is used as the tls keystore.

#[keystore.tls]
#file_name = "$ref{keystore.primary.file_name}"
#type = "$ref{keystore.primary.type}"
#password = "$ref{keystore.primary.password}"
#alias = "$ref{keystore.primary.alias}"
#key_password = "$ref{keystore.primary.key_password}"

#Google reCAPTCHA settings.

#[recaptcha]
#enabled = "true"
#api_url = "https://www.google.com/recaptcha/api.js"
#verify_url = "https://www.google.com/recaptcha/api/siteverify"
#site_key = ""
#secret_key = ""

# SMTP email sender settings.
#[output_adapter.email]
#from_address= "abcd@gmail.com"
#username= "abcd"
#password= "xxxx"
#hostname= "smtp.gmail.com"
#port= 587

# identity-oauth2-grant-rest  - Endpoint configurations
[[resource.access_control]]
default_access = "allow"
context = "(.*)/api/identity/authn/v1/authenticate"
secure = "false"
http_method = "POST"

[[resource.access_control]]
default_access = "allow"
context = "(.*)/api/identity/authn/v1/init-authenticator"
secure = "false"
http_method = "POST"

[[resource.access_control]]
default_access = "allow"
context = "(.*)/api/identity/authn/v1/auth-steps"
secure = "false"
http_method = "GET"

[tenant_context.rewrite]
custom_webapps=["/api/identity/authn/v1/"]

#identity-oauth2-grant-rest - Grant Handler Configs
[[oauth.custom_grant_type]]
name="rest_auth_grant"
grant_handler="org.wso2.carbon.identity.oauth2.grant.rest.handler.AuthenticationGrantHandler"
grant_validator="org.wso2.carbon.identity.oauth2.grant.rest.handler.AuthenticationGrantValidator"

# SMS_OTP_SERVICE event handler
# SEE: https://github.com/wso2-extensions/identity-outbound-auth-sms-otp/blob/master/docs/sms_otp_service.md
[[event_handler]]
name= "smsOtp"
properties.enabled=true
properties.tokenLength=6
properties.triggerNotification=true
properties.alphanumericToken=true
# OTP validation failure reason will be sent in the response.
properties.showValidationFailureReason=false
properties.tokenValidityPeriod=120
# Same valid OTP will be resent, if issued within the interval.
# Set '0' to always send a new OTP.
# Should be less than the 'tokenValidityPeriod' value.
properties.tokenRenewalInterval=60
# Throttle OTP generation requests from the same user Id.
# Set '0' for no throttling.
properties.resendThrottleInterval=30
# Set the maximum validation attempts allowed until the generated sms-otp expires.
properties.maxValidationAttemptsAllowed=5

